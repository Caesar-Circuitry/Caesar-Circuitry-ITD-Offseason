//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply plugin: "com.diffplug.spotless"
apply plugin: 'kotlin-android'
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {
    namespace = 'org.firstinspires.ftc.teamcode'

    packagingOptions {
        jniLibs.useLegacyPackaging true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    google()
    maven {
        url "https://repo.dairy.foundation/releases"
    }
    maven {
        url "https://repo.dairy.foundation/snapshots"
    }
}
dependencies {
    implementation project(':FtcRobotController')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.21'
    implementation "org.solverslib:core:0.2.5" // core
    implementation "org.solverslib:pedroPathing:0.2.5" // pedroPathing
}
spotless {
    java {
        // Use Google's Java formatter
        googleJavaFormat()

        // Import order
        importOrder 'java', 'javax', 'org', 'com', ''

        // Remove unused imports
        removeUnusedImports()

        // Apply formatting to all Java files
        target '**/*.java'
    }

    kotlin {
        // Use ktlint for Kotlin files
        ktlint()

        // Apply formatting to all Kotlin files
        target '**/*.kt'
    }
}

// Make spotlessApply run before compilation
tasks.withType(JavaCompile) {
    dependsOn 'spotlessApply'
}

// Also make it run before Kotlin compilation if you have Kotlin code
tasks.whenTaskAdded { task ->
    if (task.name.contains('compile') && task.name.contains('Kotlin')) {
        task.dependsOn 'spotlessApply'
    }
}
